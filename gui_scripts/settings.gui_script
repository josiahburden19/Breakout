function init(self)
	-- Location for config to be saved and loaded from
	self.file_location = 'config/config'

	-- Stores a list of all the ids of the slider points and what config key value they change
	self.slider_info = {{slider_id = 'volume_slider', point_id = 'volume_point', key = 'volume'}}
	-- Turn all the slider ids to their nodes
	self.slider_info = convert_ids_nodes(self.slider_info, {'point', 'slider'})

	self.toggle_info = 
	{{toggle_id = 'bricks_sfx_toggle', key = 'bricks_sfx'},
	{toggle_id = 'power_up_sfx_toggle', key = 'power_up_sfx'},
	{toggle_id = 'brick_falling_physics_toggle', key = 'falling_bricks'}}
	
	self.toggle_info = convert_ids_nodes(self.toggle_info, {'toggle'})

	-- Pre hashes touch
	self.touch = hash('touch')
	-- Gets node of the back button
	self.back_button = gui.get_node('back')
	self.back_button_scale = gui.get_scale(self.back_button)

	-- Checks if files exists so it can be loaded else it is created with default values
	if file_exists(self.file_location) then
		self.config = sys.load(self.file_location)
	else
		self.config = {
			volume = 100,
			bricks_sfx = true,
			power_up_sfx = false,
			falling_bricks = true
		}
		save_config(self)
	end
	-- Moves the sliders to the correct position according to the values from the config file
	initalize_slider_positions(self.config, self.slider_info)
	-- Moves the toggles to the on/off according to the values from the config file
	initalize_toggle_positions(self.config, self.toggle_info)
	-- Aquires input focus to detect when nodes clicked
	msg.post('.', 'acquire_input_focus')
end

function save_config(self)
	-- Saves the config at the given location
	sys.save(self.file_location, self.config)
end

function initalize_slider_positions(config, slider_info)
	-- Goes through every slinder_point's data
	for index, data in ipairs(slider_info) do
		-- Gets the cooresponding x position to the config value
		local x_pos = slider_value_to_x_coord(config[data.key])
		-- Gets original y value (since it does change)
		local y_pos = data.y
		-- Updates the slider point to the x and y position defined above
		gui.set_position(data.point_node, vmath.vector3(x_pos, y_pos, 0))
	end
end

function initalize_toggle_positions(config, toggle_info)
	-- Goes through every toggle's data
	for index, data in ipairs(toggle_info) do
		-- Gets the boolean value from config
		local state_of_toggle = config[data.key]
		-- Changes the image displayed of the toggle so the user can see whether it is off or on
		if state_of_toggle then
			gui.play_flipbook(data.toggle_node, 'toggle_end')
		else
			gui.play_flipbook(data.toggle_node, 'toggle_start')
		end
	end
end

function convert_ids_nodes(list_ids, keys)
	-- Iterates through all the id's and gets the node
	for index, id in ipairs(list_ids) do
		-- The sliders are composed of 2 nodes which means a 2d iteration beacause some data ha s
		for key_index, key in ipairs(keys) do
			-- Gets the node from the id and store it within the sub table
			list_ids[index][key .. '_node'] = gui.get_node(list_ids[index][key .. '_id'])
			list_ids[index][key .. '_id'] = nil
		end
		-- Gets the y position of the node and store it in the relevant sub table
		list_ids[index].y = gui.get_position(list_ids[index][keys[1] .. '_node']).y
	end
	-- Once this process is finished the list_ids will contain the node, id, y, key
	return list_ids
end

function slider_x_coord_to_value(x_coord_of_point)
	-- Given how far along a slider point is, a percentage of how much is complete will be returned
	-- Function does opposite of slider_value_to_x_coord_()
	return math.floor((x_coord_of_point + 185)/3.7 + 0.5)
end

function slider_value_to_x_coord(value)
	-- Given the percent (0 - 100) the slider is complete a the matching x coordiate will be returned
	-- Function does opposite of slider_x_coord_to_value()
	return  value *3.7 - 185
end

function file_exists(name)
	-- Checks if the file exists by opening it and checks to see if it is equal to nil
	local file=io.open(name,"r")
	if file~=nil then
		io.close(file)
		return true
	else
		return false
	end
end

function node_clicked(node_data, action_id, action, key)
	-- Pre hashes 'touch'
	local touch = hash('touch')
	-- Goes through every nodes data and checks if it has been pressed
	for index, data in ipairs(node_data) do
		if gui.pick_node(data[key .. '_node'], action.x, action.y) and action_id == touch and action.pressed then
			-- Note -- The reason why we just return 1 value is because only 1 node can be clicked at any point in time
			return index
		end
	end
	return nil
end

function check_slider_clicked(self, action_id, action)
	local index_of_slider_node = node_clicked(self.slider_info, action_id, action, 'slider')
	-- Checks to see if any of the slider bars are clicked on
	local function update_point(self, node_data)
		-- Clamp is used beacuse the slider has a range
		local x_pos = clamp(action.x - 480, -185, 185)
		-- Y value doesnt change so just use original
		local y_pos = node_data.y
		-- Updates the position so the user can visually see the slider moving
		gui.set_position(node_data.point_node, vmath.vector3(x_pos, y_pos, 0))
		-- Updates the config table according to the position of the slider
		self.config[self.current_node_data.key] = slider_x_coord_to_value(x_pos)
	end
	if index_of_slider_node ~= nil then
		-- If there is a node that has been clicked on
		self.current_node_data = self.slider_info[index_of_slider_node]
		-- Set the current_node to the node that was clicked on
		update_point(self, self.current_node_data)
		-- Update the point of the node
	end
	if self.current_node_data ~= nil and action.dx ~= 0 then
		-- If the mouse is still held down (doesnt have to be over the slider) point will update
		update_point(self, self.current_node_data)
	end
	if action.released and action_id == self.touch then
		-- If the mouse is released then update the self.current_node_data to be nil and save the new config
		self.current_node_data = nil
		save_config(self)
	end
end

function check_toggles_clicked(self, action_id, action)
	index_of_node = node_clicked(self.toggle_info, action_id, action, 'toggle')
	-- Checks to see if any of the toggles are clicked on
	if index_of_node ~= nil then
		-- If a toggle is clicked on then...
		local function toggle(node, playback)
			if playback == go.PLAYBACK_ONCE_FORWARD then
				gui.play_flipbook(node, 'toggle_forward', 
				function()
					gui.play_flipbook(node, 'toggle_end')
				end)
			else
				gui.play_flipbook(node, 'toggle_backward', 
				function()
					gui.play_flipbook(node, 'toggle_start')
				end)
			end
		end
		-- Get the node that was clicked
		local current_node_data = self.toggle_info[index_of_node]
		-- Toggle the node based on whether it was off or on e.g. ON -> OFF or OFF -> ON
		if self.config[current_node_data.key] then
			toggle(current_node_data.toggle_node, go.PLAYBACK_ONCE_BACKWARD)
		else
			toggle(current_node_data.toggle_node, go.PLAYBACK_ONCE_FORWARD)
		end
		-- Flips the state of the toggle that has been clicked
		self.config[current_node_data.key] = not self.config[current_node_data.key]
		-- Updates the config with the new values
		save_config(self)
	end
end

function on_input(self, action_id, action)
	check_slider_clicked(self, action_id, action)
	-- Updates the sliders if clicked
	check_toggles_clicked(self, action_id, action)
	-- Updates the toggles if clicked
	
	-- Updates the self.mouse_pos variable with the current coordinates of the mouse
	self.mouse_pos = vmath.vector3(action.x, action.y, 0)
	if gui.pick_node(self.back_button, action.x, action.y) then
		if action.pressed and action_id == self.touch then
			msg.post('main:/main', 'load_collection', {collection_to_load = '#title_proxy'})
		elseif gui.get_scale(self.back_button) == self.back_button_scale then
			gui.animate(self.back_button, 'scale', self.back_button_scale * 1.2, go.EASING_INCUBIC, 0.2)
		end
	end
end

function update(self, dt)
	if gui.get_scale(self.back_button) == self.back_button_scale * 1.2 and not gui.pick_node(self.back_button, self.mouse_pos.x, self.mouse_pos.y) then
		gui.animate(self.back_button, 'scale', self.back_button_scale, go.EASING_INCUBIC, 0.2)
	end
end

function clamp(value, min, max)
	if value > max then
		return max
	elseif value < min then
		return min
	end
	return value
end