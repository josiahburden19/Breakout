function init(self)
	-- Disables collision object 'after_hit'
	msg.post('#after_hit', 'disable')
	
	-- Pre-hashes 'contact_point_response'
	self.collision_response = hash('collision_response')
	-- Pre-hashes 'trigger_response'
	self.trigger_response =  hash('trigger_response')

	-- Pre hash collision groups
	self.ball = hash('ball')
	self.paddle = hash('paddle')

	-- Pre-hash message_id 'checked_ball_exists'
	self.checked_ball_exists = hash('checked_ball_exists')
	-- Pre-hash message_id 'direction'
	self.direction = hash('direction')
	
	-- Flag to store datab
	self.hit = false
	-- Flag to store if ball has been stored
	self.spawned = false

	self.sprite_powerups = {'two_balls', 'paddle_extension', 'slow_time'}

	-- Property which changes how fast the wall falls after being hit
	go.property('speed', 150)
	-- Creates a property to detect whether sound should be made upon brick breaking
	go.property('bricks_sfx', true)
	-- Creates a property to detect whether sound should be made upon power up being collected
	go.property('power_up_sfx', true)
end

function update(self, dt)
	-- If hit then move the wall downwards
	if self.hit then
		-- Ever update after the ball has been hit the wall will move downwards
		go.set('.', 'position.y', go.get_position().y - self.speed * dt)
	end
	if go.get_position().y < -20 then
		-- If the wall goes below the screen then delete it
		go.delete()
	end 
end

function on_message(self, message_id, message, sender)
	-- If collided with ball
	if message_id == self.collision_response and message.group == self.ball then
		-- Disable collision object
		msg.post('#before_hit', 'disable')
		play_random_breaking_sound(self)
		
		-- Enable the collision object for after its hit
		msg.post('#after_hit', 'enable')
		
		-- Set position on z axis so its rendered infront of other walls
		go.set('.', 'position.z', 0.92)

		-- Stores the id of the ball so the new ball can be spawed at that position
		self.ball_id = message.other_id
		
		-- Set flag self.hit to true
		self.hit = true

		self.power_up = rnd.range(1, 3)

		sprite.play_flipbook('#sprite', self.sprite_powerups[self.power_up])
		
	elseif self.hit and message_id == self.trigger_response then
		play_power_up_sound(self)
		if self.power_up == 1 then
			-- If the random power up is two_balls
			-- Sends a message to logic which contains the table of the balls that are currently in play to check whether that id of the ball that hit has gone off the screen
			msg.post('/logic', 'check_ball_exists', {ball_id = self.ball_id})
		end
		if self.power_up == 3 then
			-- If the power up is to slow time send a message to logic to slow time
			msg.post('/logic', 'ball_size')
			-- Break the brick
			go.delete()
		end
		if self.power_up == 2 then
			-- If the power up is to extent paddle send a message to paddle to extend paddle
			msg.post('/paddle', 'add_paddle')
			-- Break the brick
			go.delete()
		end
	end
	if self.power_up == 1 then
		if message_id == self.checked_ball_exists and message.did_ball_exist then
			-- If the message the message recieved from logic tells us the ball exists then send a message to the ball to get its angle
			msg.post(self.ball_id, 'angle')
		elseif message.did_ball_exist == false then
			go.delete()
		end
		if message_id == self.direction then
			-- Once the ball sends its self.direction this info can be used to tell the logic script to spawn a new ball at the coords of the ball which has similar (this is only similar beacuse some variation is added in the ball.script init function)
			-- The reason why factory.create isnt used here is beacuse we want the logic script to spawn the ball beacuse then it can add the ball's id to the table of ids
			msg.post('/logic', 'spawn_ball', {position = go.get_position(self.ball_id), initial_direction = message.direction})
			-- Break the brick
			go.delete()
		end
	end
end

function play_random_breaking_sound(self)
	if self.bricks_sfx then
		-- Sends a message to logic to play a random breaking sound
		msg.post('/logic', 'play_random_sound')
	end
end

function play_power_up_sound(self)
	if self.power_up_sfx then
		-- Sends a message to logic to play the power up sound
		msg.post('/logic', 'play_power_up_sound')
	end
end
		