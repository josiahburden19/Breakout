function init(self)
	-- Intializes the start position on the y axis
	go.property('y_pos', 10)
	
	-- Assigns an empty vector to self.start_pos to store the start position
	self.start_pos = vmath.vector3()
	-- Sets the x component of self.start_pos to half the screen width
	self.start_pos.x = sys.get_config_int("display.width")/2
	-- Sets the y component of self.start_pos to the property y_start_pos
	self.start_pos.y = self.y_pos
	-- Sets game object to the start position
	go.set_position(self.start_pos)

	self.num_of_paddle_extentions = 0
	
	-- Pre-hash message_id 'add_paddle'
	self.add_paddle = hash('add_paddle')
	-- Pre-hash message_id 'remove_paddle'
	self.remove_paddle = hash('remove_paddle')

	self.spawned_paddles_stack = {}
	self.delete_paddle_counter = 0
	msg.post('.', 'acquire_input_focus')
end

function update(self, dt)
	if self.num_of_paddle_extentions ~= 0 then
		self.delete_paddle_counter = self.delete_paddle_counter + dt
		if self.delete_paddle_counter >= 10 then
			self.num_of_paddle_extentions = self.num_of_paddle_extentions - 1
			local id_of_paddle_to_delete = table.remove(self.spawned_paddles_stack)
			go.delete(id_of_paddle_to_delete)
			self.delete_paddle_counter = 0
		end
	elseif self.delete_paddle_counter ~= 0 then
		self.delete_paddle_counter = 0
	end
end

function cal_extension(num_of_paddle_extentions)
	if num_of_paddle_extentions % 2 == 1 then
		local x_offset = (16 + (32 * math.floor(num_of_paddle_extentions/2 + 0.5)))
		return x_offset
	else
		local x_offset = (-16 - (32 * math.floor(num_of_paddle_extentions/2 + 0.5)))
		return x_offset
	end
end
	

function on_input(self, action_id, action)
	if action_id == nil then
		go.set('.', 'position.x', action.x)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == self.add_paddle and self.num_of_paddle_extentions < 30 then
		self.num_of_paddle_extentions = self.num_of_paddle_extentions + 1
		local x_offset = cal_extension(self.num_of_paddle_extentions)
		local paddle_extension_id = factory.create('/logic#paddle_extension', vmath.vector3(0, self.y_pos, 0), nil, {offset = x_offset})
		table.insert(self.spawned_paddles_stack, paddle_extension_id)
	end
end		